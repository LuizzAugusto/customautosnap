#! /usr/bin/bash

# This is free and unencumbered software released into the public domain.
# 
# Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software,
# either in source code form or as a compiled binary, for any purpose, commercial or non-commercial,
# and by any means.
# 
# In jurisdictions that recognize copyright laws, the author or authors of this software dedicate
# any and all copyright interest in the software to the public domain. We make this dedication for
# the benefit of the public at large and to the detriment of our heirs and successors. We intend
# this dedication to be an overt act of relinquishment in perpetuity of all present and future rights
# to this software under copyright law.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
# For more information, please refer to <https://unlicense.org/>

SNAP_DIR="/.snapshots"
ROOT_PREFIX="@"
HOME_PREFIX="@home"

execute () {
    # $suffix: (e.g., frequency or apt)
    suffix="$1"
    # $maxn: confirming if you want snap home (empty will not snapshot)
    snap_home="$2"

    root_verify=$(mount | grep " / " | grep "btrfs")

    if [ -z "$root_verify" ]; then
        echo "root is not a subvolume"
        exit 1
    fi

    snapshots_verify=$(mount | grep " $SNAP_DIR " | grep "btrfs")

    if [ -z "$snapshots_verify" ]; then
        echo "$SNAP_DIR not found, maybe is not a subvolume?"
    fi

    if [ -z "$suffix" ]; then
        help
        exit 1
    fi
    
    if [ "$snap_home" == "with-home" ]; then
        home_verify=$(mount | grep " /home " | grep "btrfs")

        if [ -n "$home_verify" ]; then
            answer="y"
        fi
    fi

    DATE=$(date +%Y-%m-%d_%H-%M-%S)
    
    sudo btrfs subvolume snapshot "/" "${SNAP_DIR}/${ROOT_PREFIX}-${DATE}-${suffix}"

    if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
        sudo btrfs subvolume snapshot "/home" "${SNAP_DIR}/${HOME_PREFIX}-${DATE}-${suffix}"
    fi

    sudo sh -c 'exec grub-mkconfig -o /boot/grub/grub.cfg "$@"'
}

rm_old_snapshots () {
    # $suffix: (e.g., frequency or apt)
    suffix="$1"
    # $maxn: confirming if you want snap home (empty will not snapshot)
    maxn="$2"
    # $rm_home: if you want to remove home snapshots (with-home or empty)
    rm_home="$3"

    if [ -z "$suffix" ]; then
        echo "suffix not defined"
        exit 1
    fi

    if [ -z "$maxn" ]; then
        echo "max number of snapshots not defined"
        exit 1
    fi

    if [ -z "$(find "$SNAP_DIR" -maxdepth 1 -name "${ROOT_PREFIX}-*-$suffix" | wc -l)" ]; then
        echo "no old snapshots found"
        exit 0
    fi

    echo "deleting old snapshots, keeping only the last $maxn"
    find "$SNAP_DIR" -maxdepth 1 -name "${ROOT_PREFIX}-*-$suffix" | sort | head -n -"$maxn" | xargs sudo rm -rf

    if [ "$rm_home" != "with-home" ]; then
        exit 0
    fi

    echo "removing home snapshots..."

    if [ -z "$(find "$SNAP_DIR" -maxdepth 1 -name "${HOME_PREFIX}-*-$suffix" | wc -l)" ]; then
        echo "no old home snapshots found"
        exit 0
    fi

    echo "deleting old home snapshots, keeping only the last $maxn"
    find "$SNAP_DIR" -maxdepth 1 -name "${HOME_PREFIX}-*-$suffix" | sort | head -n -"$maxn" | xargs sudo rm -rf
}

apt_config () {
    maxn="$1"

    if [ -z "$maxn" ]; then
        echo "max number of snapshots not defined"
        exit 1
    fi

    if [ -z "$(apt --version 2>/dev/null)" ]; then
        echo "apt not found, maybe you are not using debian or ubuntu?"
        exit 1
    fi

    sudo sh -c "echo 'DPkg::Pre-Invoke { \"placeholder\"; };' > /etc/apt/apt.conf.d/99customautosnap"
    sudo sed -i "s|placeholder|sudo sh -c 'customautosnap execute apt \&\& customautosnap rmold apt $maxn'|g" /etc/apt/apt.conf.d/99customautosnap
    cat /etc/apt/apt.conf.d/99customautosnap
}

search_for_installer () {
    if [ -n "$(apt --version 2>/dev/null)" ]; then
        installer="apt"
        installarg="install"
    elif [ -n "$(dnf --version 2>/dev/null)" ]; then
        installer=dnf
        installarg="install"
    elif [ -n "$(pacman --version 2>/dev/null)" ]; then
        installer="pacman"
        installarg="-S"
    else
        echo "installer not supported"
        exit 1        
    fi

    echo "$installer" "$installarg"
}

grub_btrfs () {
    installercmd="$1 $2"

    if [ "$installercmd" = " " ]; then
        installercmd="$(search_for_installer)"
    elif [ -z "$2" ]; then
        echo "defined installer '$1', but no install arg defined."
        exit 1
    fi

    if [ -z "$installercmd" ]; then
        echo "installer not supported"
        exit 1
    fi


    while [ "$answer" != "Y" ] && [ "$answer" != "y" ] && [ "$answer" != "N" ] && [ "$answer" != "n" ]; do
        echo "it will install make btrfs-progs gawk inotify-tools git, you want to continue? (Y/n)"
        read answer
    done

    if [ "$answer" = "N" ] | [ "$answer" = "n" ]; then
        echo "install aborted."
        exit 1
    fi

    sudo sh -c "$installercmd make btrfs-progs gawk inotify-tools git -y"
    git clone "https://github.com/antynea/grub-btrfs" /tmp/grub-btrfs
    cd /tmp/grub-btrfs
    sudo make install
    cd ../
    rm -rf /tmp/grub-btrfs
}

help () {
    echo "execute <suffix> <with-home>          snapshot root and maybe home (used for mark the frequency or the installer)"
    echo "rmold <suffix> <maxn> <with-home>     remove old snapshots, keeping only the last maxn (used for mark the frequency or the installer)"
    echo "config-apt <maxn>                     configure apt to snapshot before install, keeping only the last maxn"
    echo "grub-btrfs <installer> <installarg>   install and configure grub-btrfs, if no installer is defined, it will search for apt, dnf or pacman"
    echo "help		                            show this message"
}

set -e
option="$1"
shift

case $option in
    execute) execute "$1" "$2" ;;
    rmold) rm_old_snapshots "$1" "$2" "$3" ;;
    config-apt) apt_config "$1" ;;
    grub-btrfs) grub_btrfs "$1" "$2" ;;
    help) help ;;
    *) help; exit 1 ;;
esac
